* rhk

  *This project is currently in the initial planning phase; do not
  expect usable builds or releases for some time.*

  rhk is an extremely minimal and generic hotkey daemon for X11 and
  Wayland. Unlike most similar hotkey programs, rhk has no
  configuration file, and operates solely based on command-line
  options.

** Project state

   - [ ] Key name parsing
   - [ ] Transparent server-client model
   - [ ] X11 event listening
   - [ ] X11 event synthesis
   - [ ] Subcommands
     - [ ] ~command~
     - [ ] ~map~
     - [ ] ~listen~
     - [ ] ~unbind~

** Specifying key bindings

   Key bindings are specified as space-separated sequences of "key
   chords", which are set of optionally one or more modifiers
   (control, shift, meta, alt, super) followed by a key (which must
   come last). Modifiers and keys can be separated by either hyphens
   or plus symbols.

*** Modifier names

    The following modifier keys and aliases thereof are recognized:
    - Control, Ctrl, C.
    - Alt, Meta, A.
    - Shift, S.
    - Super, Windows, Command, s.
    - Hyper, h.
    Single-letter names are case-sensitive (to make shift and super
    distinguishable), but the other names are not.

*** Key names

    The valid names for keys (other than modifiers) are:
    - Standard X11 keysyms as output by ~xev~, like 'a', 'Right',
      'bracketleft'.
    - Capital letters, which are shorthand for shifted variants of
      normal letters. For example, 'Q' is equivalent to 'Shift+q'.
    - Any symbols that can be typed on the host's keyboard layout,
      including shifted variants. For example, on my en_US keyboard,
      'C-{' is equivalent to 'Control+Shift+bracketleft'.

** Program usage

   In general, rhk spawns only one master process when it is first
   invoked on a particular display; subsequent invocations on the same
   display just communicate with this master process using a UNIX
   socket rather than spawning their own processes (although to the
   user there is no immediately obvious difference).

   There are several different subcommands supported by rhk, each of
   which corresponds to a different type of keybinding.

*** Shell command keybindings

    #+BEGIN_EXAMPLE
    rhk command <keybinding> <command ...>
    #+END_EXAMPLE

    The simplest and default type of binding, this creates a hotkey
    that runs the shell command when pressed. This invocation
    immediately returns, either by forking into the background or by
    communicating with an already-running instance for this display.

*** Re-mapping keybindings

    #+BEGIN_EXAMPLE
    rhk map <keybinding_1> <keybinding_2>
    #+END_EXAMPLE

    Re-mapping bindings are used to make programs see one key sequence
    as another. For example, you might use
    #+BEGIN_EXAMPLE
    rhk map 'C-f' 'right'
    #+END_EXAMPLE
    to make ~control-f~ function as a right arrow key. Whenever the
    user depresses ~f~ while holding ~control~, ~rhk~ sends a key-down
    event for the right arrow key to the selected application; when
    the user releases either ~control~ or ~f~, ~rhk~ sends a key-up
    event.

    Similar to ~rhk command~, this invocation does not block.

*** Listening keybindings

    #+BEGIN_EXAMPLE
    rhk listen <keybinding>
    #+END_EXAMPLE

    Listening keybindings are a lower-level type of keybinding than
    the other types. Rather than forking into the background, this
    invocation blocks and prints out status messages when the
    keybinding is pressed and released. Specifically, it prints out
    the word "DOWN" when the key is pressed, and "UP" when it is
    released, each message on its own line. These messages can then be
    used by scripts to perform dynamic actions when the key is pressed
    and released.

*** Removing keybindings

    #+BEGIN_EXAMPLE
    rhk unbind <keybinding>
    rhk unbind_all
    #+END_EXAMPLE

    A keybinding that has been previously set can be disabled using
    this command, or ~unbind_all~ can be passed to disable all enabled
    keybindings and kill all ~listen~ sessions.
